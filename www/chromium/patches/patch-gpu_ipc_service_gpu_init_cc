$OpenBSD: patch-gpu_ipc_service_gpu_init_cc,v 1.5 2017/09/09 19:16:43 robert Exp $

Index: gpu/ipc/service/gpu_init.cc
--- gpu/ipc/service/gpu_init.cc.orig
+++ gpu/ipc/service/gpu_init.cc
@@ -118,7 +118,7 @@ void CollectGraphicsInfo(gpu::GPUInfo& gpu_info) {
 }
 #endif  // defined(OS_MACOSX)
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_BSD)
 bool CanAccessNvidiaDeviceFile() {
   bool res = true;
   base::ThreadRestrictions::AssertIOAllowed();
@@ -188,7 +188,7 @@ bool GpuInit::InitializeAndStartSandbox(const base::Co
   // Get vendor_id, device_id, driver_version from browser process through
   // commandline switches.
   GetGpuInfoFromCommandLine(gpu_info_, command_line);
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_BSD)
   if (gpu_info_.gpu.vendor_id == 0x10de &&  // NVIDIA
       gpu_info_.driver_vendor == "NVIDIA" && !CanAccessNvidiaDeviceFile())
     return false;
@@ -201,7 +201,7 @@ bool GpuInit::InitializeAndStartSandbox(const base::Co
   sandbox_helper_->PreSandboxStartup();
 
   bool attempted_startsandbox = false;
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // On Chrome OS ARM Mali, GPU driver userspace creates threads when
   // initializing a GL context, so start the sandbox early.
   if (command_line.HasSwitch(switches::kGpuSandboxStartEarly)) {
